import { Composer, Markup } from "telegraf";
import { Scene } from "./Scene.abstract.js";
import { Scenes } from "telegraf";
import { sessionData } from "../Context/Context.interface.js";
import { message } from "telegraf/filters";

export class ChattingScene extends Scene {
	public 		scene       ;
	protected stepHandler ;
	protected usersSession;

	constructor(scenesName: string, usersSession: sessionData | undefined) {
		super();

		this.usersSession = usersSession;
		this.stepHandler 	= new Composer<Scenes.WizardContext>();
		this.scene 				= new Scenes.WizardScene<Scenes.WizardContext>(scenesName, this.enterScene());
	}
	
	protected enterScene() {
		this.leaveHandler();

		return this.stepHandler.on(message("text"), (ctx) => {
			const user = this.usersSession?.users[ctx.from.id];

			if (user?.scenes.interlocutor) ctx.wizard.next();

			if (!ctx.message.text.startsWith("@@") && ![ctx.message.text].includes("/chatting")) {
				ctx.reply("–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π @@–Æ–∑–µ—Ä–Ω–µ–π–º —á–µ–ª–æ–≤–µ–∫–∞, –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –¥–≤–µ @@");
			}
		});
	}

	protected leaveHandler() {
		this.stepHandler.hears("–î–æ–º–æ–πüè†", async (ctx) => {
			const user = this.usersSession?.users[ctx.from?.id ?? "null"];

			if (user) {
				user.scenes._firstTime 	 = 	true;
				user.scenes.interlocutor =  null;
			}

			await ctx.reply("–ö–æ–Ω–µ—Ü –æ–±—â–µ–Ω–∏—è", Markup.removeKeyboard());

			await ctx.scene.leave();

			await ctx.reply(
				"–í–æ—Ç –≤—ã –∏ —Å–Ω–æ–≤–∞ –¥–æ–º–∞, –ì–æ—Å–ø–æ–¥–∏–Ω",
				Markup.inlineKeyboard([
					[Markup.button.callback("–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µüó£", "Start_chatting")],
					[Markup.button.callback("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª—é–¥–∏üë®‚Äçüë¶‚Äçüë¶", "Saved_people")],
					[Markup.button.callback("–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ?üßê", "Whats_this")],
				])
			);
		});
	}
}